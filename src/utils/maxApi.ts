import { siteConfig } from '../config/site'
import type { FormData } from '../types'



// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
interface MaxApiResponse {
  ok: boolean
  result?: any
  error_code?: number
  description?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ MAX Bot API
export const sendApplicationToManager = async (formData: FormData): Promise<boolean> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Å—Ä–µ–¥–µ MAX
    if (typeof window !== 'undefined' && (window as any).MAX) {
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const message = `
ü§ñ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞*

üë§ *–ò–º—è:* ${formData.name}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${formData.company}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üìß *Email:* ${formData.email}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*
${formData.description}

---
*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ "–ü–∞—Ç—Ä–∏–æ—Ç —Å–ª—É—à–∞–µ—Ç"*
      `.trim()

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MAX API
      const success = await sendMessageViaMaxApi(message)
      return success
    } else {
      // –ï—Å–ª–∏ –Ω–µ –≤ MAX, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
      const success = await sendMessageViaBotApi(formData)
      return success
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ MAX API (–≤ —Å—Ä–µ–¥–µ MAX)
const sendMessageViaMaxApi = async (message: string): Promise<boolean> => {
  try {
    const maxApi = (window as any).MAX
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    const managerId = siteConfig.contacts.managerId
    
    await maxApi.sendMessage({
      peer_id: managerId,
      message: message,
      random_id: Math.random().toString(36).substring(7)
    })

    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ MAX API:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API (–≤–Ω–µ —Å—Ä–µ–¥—ã MAX)
const sendMessageViaBotApi = async (formData: FormData): Promise<boolean> => {
  try {
    const message = `
ü§ñ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞*

üë§ *–ò–º—è:* ${formData.name}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${formData.company}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üìß *Email:* ${formData.email}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:*
${formData.description}

---
*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ª–µ–Ω–¥–∏–Ω–≥–∞ "–ü–∞—Ç—Ä–∏–æ—Ç —Å–ª—É—à–∞–µ—Ç"*
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
    const response = await fetch(`${siteConfig.max.apiUrl}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        access_token: siteConfig.max.accessToken,
        peer_id: siteConfig.contacts.managerId,
        message: message,
        random_id: Math.random().toString(36).substring(7)
      })
    })

    const result: MaxApiResponse = await response.json()
    
    if (result.ok) {
      console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Bot API')
      return true
    } else {
      console.error('–û—à–∏–±–∫–∞ Bot API:', result.description)
      return false
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
export const getBotInfo = async (): Promise<any> => {
  try {
    const response = await fetch(`${siteConfig.max.apiUrl}/me?access_token=${siteConfig.max.accessToken}`)
    const result: MaxApiResponse = await response.json()
    
    if (result.ok) {
      return result.result
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', result.description)
      return null
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
export const setWebhook = async (url: string): Promise<boolean> => {
  try {
    const response = await fetch(`${siteConfig.max.apiUrl}/subscriptions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        access_token: siteConfig.max.accessToken,
        url: url
      })
    })

    const result: MaxApiResponse = await response.json()
    
    if (result.ok) {
      console.log('Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      return true
    } else {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.description)
      return false
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', error)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ MAX
export const getMaxUserInfo = async () => {
  try {
    if (typeof window !== 'undefined' && (window as any).MAX) {
      const max = (window as any).MAX
      const userInfo = await max.getUserInfo()
      return userInfo
    }
    return null
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ MAX
export const isMaxAuthorized = (): boolean => {
  return typeof window !== 'undefined' && !!(window as any).MAX
}
